
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author ALFA
 */
public class AdminUI extends javax.swing.JFrame {

    LoginFrame login;
    MobileCompany company;

    /**
     * Creates new form AdminUI
     */
    public AdminUI(MobileCompany company, LoginFrame login) {
        this.company = company;
        this.login = login;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        userListBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        planTable = new javax.swing.JTable();
        addNewPlanButton = new javax.swing.JButton();
        editPlanButton = new javax.swing.JButton();
        deletePlanButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        findField = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        findButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        findTextArea = new javax.swing.JTextArea();
        userListBox1 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        planTable1 = new javax.swing.JTable();
        jLabel23 = new javax.swing.JLabel();
        filterMobileModelField = new javax.swing.JTextField();
        filterByDateButton = new javax.swing.JButton();
        jLabel24 = new javax.swing.JLabel();
        filterExpiryDateField = new javax.swing.JTextField();
        sortByUsernameCheckBox = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        userListBox2 = new javax.swing.JComboBox<>();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        userTable = new javax.swing.JTable();
        sortUsersCheckBox = new javax.swing.JCheckBox();
        addUserButton = new javax.swing.JButton();
        editUserButton = new javax.swing.JButton();
        deleteUserButton = new javax.swing.JButton();
        findUserField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        reportTable = new javax.swing.JTable();
        cityReportButton = new javax.swing.JToggleButton();
        modelReportButton = new javax.swing.JToggleButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        logOutMenuItem = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        userListBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                userListBoxItemStateChanged(evt);
            }
        });

        jLabel1.setText("User:");

        planTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "PlanID", "User Name", "Model", "OS type", "Memory Size", "Handset Price", "Internet Quota", "Cap Limit", "Expiry Date", "City", "ABN", "Number of Employess", "Monthly Payment"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(planTable);

        addNewPlanButton.setText("Add New Plan");
        addNewPlanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewPlanButtonActionPerformed(evt);
            }
        });

        editPlanButton.setText("Edit Plan");
        editPlanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editPlanButtonActionPerformed(evt);
            }
        });

        deletePlanButton.setText("Delete Plan");
        deletePlanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePlanButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(userListBox, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(addNewPlanButton)
                .addGap(18, 18, 18)
                .addComponent(editPlanButton, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(deletePlanButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 872, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userListBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(addNewPlanButton)
                    .addComponent(editPlanButton)
                    .addComponent(deletePlanButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 245, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Plans Informations", jPanel1);

        jLabel22.setText("Plan ID");

        findButton.setForeground(new java.awt.Color(255, 51, 51));
        findButton.setText("Find");
        findButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findButtonActionPerformed(evt);
            }
        });

        findTextArea.setColumns(20);
        findTextArea.setRows(5);
        jScrollPane1.setViewportView(findTextArea);

        userListBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                userListBox1ItemStateChanged(evt);
            }
        });

        jLabel2.setText("User ID:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(findField, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(findButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(userListBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(264, 264, 264))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 708, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(174, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(findField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22)
                    .addComponent(findButton)
                    .addComponent(userListBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 892, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 527, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("Find Plan", jPanel2);

        planTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "PlanID", "User Name", "Model", "OS type", "Memory Size", "Handset Price", "Internet Quota", "Cap Limit", "Expiry Date", "City", "ABN", "Number of Employess", "Monthly Payment"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(planTable1);

        jLabel23.setText("Mobile Model");

        filterMobileModelField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filterMobileModelFieldKeyReleased(evt);
            }
        });

        filterByDateButton.setText("Filter By Date");
        filterByDateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterByDateButtonActionPerformed(evt);
            }
        });

        jLabel24.setText("Expiry Date");

        sortByUsernameCheckBox.setText("Sort by Username");
        sortByUsernameCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sortByUsernameCheckBoxStateChanged(evt);
            }
        });
        sortByUsernameCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortByUsernameCheckBoxActionPerformed(evt);
            }
        });

        jLabel3.setText("User ID:");

        userListBox2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                userListBox2ItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 892, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filterMobileModelField, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(filterExpiryDateField)))
                .addGap(33, 33, 33)
                .addComponent(filterByDateButton)
                .addGap(180, 180, 180)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sortByUsernameCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(userListBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(userListBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3))
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(filterMobileModelField, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filterByDateButton)
                    .addComponent(jLabel24)
                    .addComponent(filterExpiryDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sortByUsernameCheckBox))
                .addGap(40, 40, 40))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 892, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 527, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("FilterPlans", jPanel4);

        userTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Password", "ID", "StreetNumber", "Street", "Suburub", "City", "Total Payment"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(userTable);

        sortUsersCheckBox.setText("Sort By Monthly Payment");
        sortUsersCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sortUsersCheckBoxStateChanged(evt);
            }
        });

        addUserButton.setText("Add New User");
        addUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUserButtonActionPerformed(evt);
            }
        });

        editUserButton.setText("Edit User");
        editUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editUserButtonActionPerformed(evt);
            }
        });

        deleteUserButton.setText("Remove User");
        deleteUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteUserButtonActionPerformed(evt);
            }
        });

        findUserField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                findUserFieldKeyReleased(evt);
            }
        });

        jLabel4.setText("Find By User Name");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 882, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(addUserButton)
                .addGap(28, 28, 28)
                .addComponent(editUserButton)
                .addGap(18, 18, 18)
                .addComponent(deleteUserButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(sortUsersCheckBox)
                .addGap(214, 214, 214))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(findUserField, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sortUsersCheckBox)
                    .addComponent(addUserButton)
                    .addComponent(editUserButton)
                    .addComponent(deleteUserButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 129, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(findUserField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(49, 49, 49)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );

        jTabbedPane1.addTab("Users", jPanel6);

        reportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "", "", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        reportTable.setEnabled(false);
        jScrollPane5.setViewportView(reportTable);

        cityReportButton.setText("Report Per City");
        cityReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityReportButtonActionPerformed(evt);
            }
        });

        modelReportButton.setText("Report Per Mobile Model");
        modelReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modelReportButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(modelReportButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cityReportButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 127, Short.MAX_VALUE)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(175, 175, 175))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(67, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(cityReportButton)
                        .addGap(35, 35, 35)
                        .addComponent(modelReportButton))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(99, 99, 99))
        );

        jTabbedPane1.addTab("Report", jPanel7);

        logOutMenuItem.setText("Log Out");
        logOutMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logOutMenuItemMouseClicked(evt);
            }
        });
        jMenuBar1.add(logOutMenuItem);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        // TODO add your handling code here:

        try {
            fillUserComboBox();
            fillPlanTable();
            fillTable1();
            fillUserTable();
            reportTable.setVisible(false);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }


    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void userListBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_userListBoxItemStateChanged
        try {
            fillPlanTable();
        } catch (Exception e) {
        }

    }//GEN-LAST:event_userListBoxItemStateChanged

    private void addNewPlanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewPlanButtonActionPerformed
        try {
            User user = company.findUser(Integer.parseInt(userListBox.getSelectedItem().toString()));
            addNewPlanForm addPlanForm = new addNewPlanForm(user, this);
            addPlanForm.setVisible(true);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }

    }//GEN-LAST:event_addNewPlanButtonActionPerformed

    private void editPlanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editPlanButtonActionPerformed
        // TODO add your handling code here:
        try {
            User user = company.findUser(Integer.parseInt(userListBox.getSelectedItem().toString()));
            int ind = this.planTable.getSelectedRow();
            if (ind >= 0) {
                int ID = Integer.parseInt((String) planTable.getValueAt(ind, 0));
                editPlanForm editPlanForm = new editPlanForm((Plan) user.getPlans().get(ID), this);
                editPlanForm.setVisible(true);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }
    }//GEN-LAST:event_editPlanButtonActionPerformed

    private void deletePlanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePlanButtonActionPerformed
        // TODO add your handling code here:
        User user = company.findUser(Integer.parseInt(userListBox.getSelectedItem().toString()));
        try {
            int ind = this.planTable.getSelectedRow();
            if (ind >= 0) {
                int ID = Integer.parseInt((String) planTable.getValueAt(ind, 0));
                user.getPlans().remove(ID);
                fillPlanTable();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }
    }//GEN-LAST:event_deletePlanButtonActionPerformed

    private void findButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findButtonActionPerformed
        try {
            User user = company.findUser(Integer.parseInt(userListBox1.getSelectedItem().toString()));
            Plan plan = user.findPlan(Integer.parseInt(findField.getText()));
            if (plan != null) {
                findTextArea.append(plan.toString() + "\n");
            } else {
                findTextArea.append("Plan with ID: " + findField.getText() + " dont exist" + "\n");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }

    }//GEN-LAST:event_findButtonActionPerformed

    private void userListBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_userListBox1ItemStateChanged
        // TODO add your handling code here:
        findTextArea.setText("");
    }//GEN-LAST:event_userListBox1ItemStateChanged

    private void filterMobileModelFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filterMobileModelFieldKeyReleased
        try {
            fillTable1();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_filterMobileModelFieldKeyReleased

    private void filterByDateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterByDateButtonActionPerformed
        try {
            fillTable1();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_filterByDateButtonActionPerformed

    private void sortByUsernameCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sortByUsernameCheckBoxStateChanged
        try {
            fillTable1();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_sortByUsernameCheckBoxStateChanged

    private void sortByUsernameCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortByUsernameCheckBoxActionPerformed
        try {
            fillTable1();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_sortByUsernameCheckBoxActionPerformed

    private void userListBox2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_userListBox2ItemStateChanged
        // TODO add your handling code here:
        try {
            fillTable1();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_userListBox2ItemStateChanged

    private void sortUsersCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sortUsersCheckBoxStateChanged
        fillUserTable();
    }//GEN-LAST:event_sortUsersCheckBoxStateChanged

    private void cityReportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityReportButtonActionPerformed
        String[] header = {"City", "Total Monthly Paymnet"};
        DefaultTableModel model = new DefaultTableModel(header, 0);
        this.reportTable.setModel(model);
        HashMap<String, Double> report = company.getTotalPaymentPerCity();
        for (String cityName : report.keySet()) {
            String[] row = new String[2];
            row[0] = cityName;
            row[1] = report.get(cityName) + " $";
            model.addRow(row);
        }
        reportTable.setVisible(true);
    }//GEN-LAST:event_cityReportButtonActionPerformed

    private void modelReportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modelReportButtonActionPerformed
        String[] header = {"Mobile Model", "Total Permium", "AveragePermium"};
        DefaultTableModel model = new DefaultTableModel(header, 0);
        this.reportTable.setModel(model);
        HashMap<String, Double> report = company.getTotalPaymentPerMobileModel();
        HashMap<String, Integer> count = company.getTotalCountPerMobileModel();
        for (String mobileModel : report.keySet()) {
            String[] row = new String[3];
            row[0] = mobileModel;
            row[1] = report.get(mobileModel) + " $";
            row[2] = report.get(mobileModel) / count.get(mobileModel) + " $";
            model.addRow(row);
        }
        reportTable.setVisible(true);
    }//GEN-LAST:event_modelReportButtonActionPerformed

    private void deleteUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteUserButtonActionPerformed

        try {
            int ind = this.userTable.getSelectedRow();
            if (ind >= 0) {
                int ID = Integer.parseInt((String) userTable.getValueAt(ind, 2));
                company.removeUser(ID);
                fillUserTable();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }
    }//GEN-LAST:event_deleteUserButtonActionPerformed

    private void findUserFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_findUserFieldKeyReleased
        fillUserTable();
    }//GEN-LAST:event_findUserFieldKeyReleased

    private void addUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addUserButtonActionPerformed
        // TODO add your handling code here:
        try {
            creatUserForm creatUserForm = new creatUserForm(this);
            creatUserForm.setVisible(true);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }
    }//GEN-LAST:event_addUserButtonActionPerformed

    private void editUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editUserButtonActionPerformed
        try {
            int ind = this.userTable.getSelectedRow();
            if (ind >= 0) {
                int ID = Integer.parseInt((String) userTable.getValueAt(ind, 2));
                User user = company.findUser(ID);
                editUserForm editUserForm = new editUserForm(user, this);
                editUserForm.setVisible(true);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }

    }//GEN-LAST:event_editUserButtonActionPerformed

    private void logOutMenuItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logOutMenuItemMouseClicked
        dispose();
        login.setVisible(true);
    }//GEN-LAST:event_logOutMenuItemMouseClicked

    public void fillUserComboBox() {
        userListBox.removeAllItems();
        userListBox1.removeAllItems();
        userListBox2.removeAllItems();
        for (Integer user : company.getUsers().keySet()) {
            userListBox.addItem(user + "");
            userListBox1.addItem(user + "");
            userListBox2.addItem(user + "");
        }
        userListBox.setSelectedIndex(0);
        userListBox1.setSelectedIndex(0);
        userListBox2.setSelectedIndex(0);
    }

    public void fillPlanTable() {
        User user = company.findUser(Integer.parseInt(userListBox.getSelectedItem().toString()));
        String[] header = {"Plan ID", "username", "Model", "OS Type", "Memory Size", "handset price", "Internet Quota", "Cap Limit", "Expiry Date", "City", "ABN", "Number of Employees", "Monthly Payment"};
        DefaultTableModel model = new DefaultTableModel(header, 0);
        this.planTable.setModel(model);
        for (Plan plan : user.getPlans().values()) {

            String[] row = new String[13];
            row[0] = plan.getId() + "";
            row[1] = plan.getUserName();
            row[2] = plan.getHandset().getModel();
            row[3] = plan.getHandset().getType().toString();
            row[4] = plan.getHandset().getMemorySize() + "";
            row[5] = plan.getHandset().getPrice() + "";
            row[6] = plan.getInternetQuota() + "";
            row[7] = plan.getCapLimit() + "";
            row[8] = plan.getExpiryDate().toString();
            if (plan instanceof PersonalPlan) {

                row[9] = ((PersonalPlan) plan).getCity();
                row[10] = "NA";
                row[11] = "NA";
            } else {

                row[9] = "NA";
                row[10] = ((BusinessPlan) plan).getABN() + "";
                row[11] = ((BusinessPlan) plan).getNumberOfEmployees() + "";
            }
            row[12] = String.format("$%.2f", plan.calcPayment(5));

            model.addRow(row);
        }
    }

    public void fillTable1() {
        try {
            User user = company.findUser(Integer.parseInt(userListBox2.getSelectedItem().toString()));

            ArrayList<Plan> plansCopy = user.shallowCopyPlans();
            if (!filterMobileModelField.getText().isEmpty()) {
                plansCopy = Plan.filterByMobileModel(plansCopy, filterMobileModelField.getText());
            }
            if (!filterExpiryDateField.getText().isEmpty()) {
                String[] fields = filterExpiryDateField.getText().split("/");
                int year = Integer.parseInt(fields[0]);
                int month = Integer.parseInt(fields[1]);
                int day = Integer.parseInt(fields[2]);
                MyDate date = new MyDate(year, month, day);
                plansCopy = Plan.filterByExpiryDate(plansCopy, date);
            }
            if (sortByUsernameCheckBox.isSelected()) {
                Collections.sort(plansCopy);
            }
            String[] header = {"Plan ID", "username", "Model", "OS Type", "Memory Size", "handset price", "Internet Quota", "Cap Limit", "Expiry Date", "City", "ABN", "Number of Employees", "Monthly Payment"};
            DefaultTableModel model = new DefaultTableModel(header, 0);
            this.planTable1.setModel(model);
            for (Plan plan : plansCopy) {

                String[] row = new String[13];
                row[0] = plan.getId() + "";
                row[1] = plan.getUserName();
                row[2] = plan.getHandset().getModel();
                row[3] = plan.getHandset().getType().toString();
                row[4] = plan.getHandset().getMemorySize() + "";
                row[5] = plan.getHandset().getPrice() + "";
                row[6] = plan.getInternetQuota() + "";
                row[7] = plan.getCapLimit() + "";
                row[8] = plan.getExpiryDate().toString();
                if (plan instanceof PersonalPlan) {

                    row[9] = ((PersonalPlan) plan).getCity();
                    row[10] = "NA";
                    row[11] = "NA";
                } else {

                    row[9] = "NA";
                    row[10] = ((BusinessPlan) plan).getABN() + "";
                    row[11] = ((BusinessPlan) plan).getNumberOfEmployees() + "";
                }
                row[12] = String.format("$%.2f", plan.calcPayment(5));

                model.addRow(row);
            }

        } catch (NullPointerException e) {
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }

    }

    public void fillUserTable() {
        String[] header = {"Name", "Password", "ID", "StreetNumber", "Street", "Suburub", "City", "Total Payment"};
        DefaultTableModel model = new DefaultTableModel(header, 0);
        this.userTable.setModel(model);
        ArrayList<User> users = company.shallowCopyUsers();
        if (!findUserField.getText().isEmpty()) {
            users = company.filterByName(findUserField.getText());
        }
        if (sortUsersCheckBox.isSelected()) {
            try {
                users = company.sortUsersByMonthlyPayment();
            } catch (CloneNotSupportedException e) {
                JOptionPane.showMessageDialog(this, e);
            }

        }

        for (User user : users) {

            String[] row = new String[8];
            row[0] = user.getName();
            row[1] = user.getUserPassword();
            row[2] = user.getUserID() + "";
            row[3] = user.getAddress().getStreetNum() + "";
            row[4] = user.getAddress().getStreet();
            row[5] = user.getAddress().getSuburb();
            row[6] = user.getAddress().getCity();
            row[7] = String.format("$%.2f", user.calcTotalPayment(5));

            model.addRow(row);
        }
    }
    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addNewPlanButton;
    private javax.swing.JButton addUserButton;
    private javax.swing.JToggleButton cityReportButton;
    private javax.swing.JButton deletePlanButton;
    private javax.swing.JButton deleteUserButton;
    private javax.swing.JButton editPlanButton;
    private javax.swing.JButton editUserButton;
    private javax.swing.JButton filterByDateButton;
    private javax.swing.JTextField filterExpiryDateField;
    private javax.swing.JTextField filterMobileModelField;
    private javax.swing.JButton findButton;
    private javax.swing.JTextField findField;
    private javax.swing.JTextArea findTextArea;
    private javax.swing.JTextField findUserField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JMenu logOutMenuItem;
    private javax.swing.JToggleButton modelReportButton;
    private javax.swing.JTable planTable;
    private javax.swing.JTable planTable1;
    private javax.swing.JTable reportTable;
    private javax.swing.JCheckBox sortByUsernameCheckBox;
    private javax.swing.JCheckBox sortUsersCheckBox;
    private javax.swing.JComboBox<String> userListBox;
    private javax.swing.JComboBox<String> userListBox1;
    private javax.swing.JComboBox<String> userListBox2;
    private javax.swing.JTable userTable;
    // End of variables declaration//GEN-END:variables
}
